type ChallengePool @entity {
  id: ID! # challengeId
  challengeId: BigInt! # uint256
  baller: Bytes! # address
  createdAt: BigInt! # uint256
  maturity: BigInt! # uint256
  result: Prediction! # uint8
  stake: BigInt! # uint256
  fee: BigInt! # uint256
  yesParticipants: BigInt! # uint256
  noParticipants: BigInt! # uint256
  state: ChallengeState!
  events: [ChallengeEvent!]! @derivedFrom(field: "challenge")
  participants: [ChallengeParticipant!]! @derivedFrom(field: "challenge")
  stateUpdates: [ChallengeStateUpdate!]! @derivedFrom(field: "challenge")
  withdrawals: [ChallengeStateUpdate!]! @derivedFrom(field: "challenge")
  nextCloseTime: BigInt! # uint256
  staleRetries: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChallengeParticipant @entity(immutable: true) {
  id: ID! #challengeId_baller
  challenge: ChallengePool!
  baller: Bytes! # address
  stake: BigInt! # uint256
  prediction: Prediction! # uint8
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChallengeStateUpdate @entity(immutable: true) {
  id: ID! #challengeId_baller_state
  challenge: ChallengePool!
  baller: Bytes! # address
  state: ChallengeState!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

enum Prediction {
  zero
  yes
  no
}

enum ChallengeState {
  open
  closed
  stale
  manual
  cancelled
  locked
  mature
}

interface ChallengeEvent {
  id: ID! # challengeId_eventPos
  maturity: BigInt!
  topicId: BigInt!
  challenge: ChallengePool!
  result: Prediction!
}

union FutureEvent =
    AssetPriceTargetEvent
  | AssetPriceBoundedEvent
  | FootballOutcomeEvent
  | FootballCorrectScoreEvent
  | FootballOverUnderEvent
  | GeneralStatementEvent

type AssetPriceTargetEvent implements ChallengeEvent @entity(immutable: true) {
  id: ID! # challengeId_eventPos
  maturity: BigInt!
  topicId: BigInt!
  challenge: ChallengePool!
  result: Prediction!
  assetSymbol: String
  price: BigInt
  outcome: String
}

type AssetPriceBoundedEvent implements ChallengeEvent @entity(immutable: true) {
  id: ID! # challengeId_eventPos
  maturity: BigInt!
  topicId: BigInt!
  challenge: ChallengePool!
  result: Prediction!
  assetSymbol: String
  priceLowerBound: BigInt
  priceUpperBound: BigInt
  outcome: String
}

type FootballOutcomeEvent implements ChallengeEvent @entity(immutable: true) {
  id: ID! # challengeId_eventPos
  maturity: BigInt!
  topicId: BigInt!
  challenge: ChallengePool!
  result: Prediction!
  matchId: BigInt
  outcome: String
}

type FootballCorrectScoreEvent implements ChallengeEvent @entity(immutable: true) {
  id: ID! # challengeId_eventPos
  maturity: BigInt!
  topicId: BigInt!
  challenge: ChallengePool!
  result: Prediction!
  matchId: BigInt
  homeScore: BigInt
  awayScore: BigInt
}

type FootballOverUnderEvent implements ChallengeEvent @entity(immutable: true) {
  id: ID! # challengeId_eventPos
  maturity: BigInt!
  topicId: BigInt!
  challenge: ChallengePool!
  result: Prediction!
  matchId: BigInt
  totalGoals: BigInt
  outcome: String
}

type GeneralStatementEvent implements ChallengeEvent @entity(immutable: true) {
  id: ID! # challengeId_eventPos
  maturity: BigInt!
  topicId: BigInt!
  challenge: ChallengePool!
  result: Prediction!
  statementId: BigInt
}

type WinningsWithdrawn @entity(immutable: true) {
  id: ID! # challengeId_baller
  baller: Bytes! # address
  challenge: ChallengePool! # uint256
  amountWithdrawn: BigInt! # uint256
  amountWon: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type AssetPriceProvided @entity(immutable: true) {
  id: ID! #assetSymbol_date
  provider: Bytes! # address
  assetSymbol: String! # string
  date: BigInt! # uint256
  price: BigInt! # uint256
  request: AssetPriceRequested!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AssetPriceRequested @entity {
  id: ID! #assetSymbol_date
  reader: Bytes! # address
  assetSymbol: String! # string
  date: BigInt! # uint256
  provided: AssetPriceProvided
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FootballScoreProvided @entity(immutable: true) {
  id: ID! # matchId
  provider: Bytes! # address
  matchId: BigInt! # uint256
  homeScore: BigInt! # uint256
  awayScore: BigInt! # uint256
  request: FootballScoreRequested!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FootballScoreRequested @entity {
  id: ID! # matchId
  reader: Bytes! # address
  matchId: BigInt! # uint256
  provided: FootballScoreProvided
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GeneralStatementProvided @entity(immutable: true) {
  id: ID! # statementId
  provider: Bytes! # address
  statementId: BigInt! # uint256
  statement: String! # string
  results: Int! # uint8
  request: GeneralStatementRequested
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GeneralStatementRequested @entity {
  id: ID! # statementId
  reader: Bytes! # address
  statementId: BigInt! # uint256
  provided: GeneralStatementProvided
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
